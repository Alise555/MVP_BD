import sys
import os
from unittest.mock import MagicMock

from src.table.table import Table

def test_basic_functionality(table):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"""
    print("\n=== –¢–ï–°–¢ –ë–ê–ó–û–í–û–ì–û –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê ===")
    print(f"–ò–º—è —Ç–∞–±–ª–∏—Ü—ã: {table.get_name()}")
    print(f"–†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: {table.get_size()}")
    print(f"–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞: {table.is_empty()}")

def test_add_column(table):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫"""
    print("\n=== –¢–ï–°–¢ –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ö–û–õ–û–ù–û–ö ===")
    table.add_column("id", "int")
    table.add_column("name", "str")
    table.add_column("age", "int")
    print("–ö–æ–ª–æ–Ω–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")

def test_modify_column(table):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫"""
    print("\n=== –¢–ï–°–¢ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–û–õ–û–ù–û–ö ===")
    table.modify_column("name", "full_name", "varchar(100)")
    print("–ö–æ–ª–æ–Ω–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞")

def test_drop_column(table):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫"""
    print("\n=== –¢–ï–°–¢ –£–î–ê–õ–ï–ù–ò–Ø –ö–û–õ–û–ù–û–ö ===")
    table.drop_column("age")
    print("–ö–æ–ª–æ–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∞")

def test_insert_data(table):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n=== –¢–ï–°–¢ –í–°–¢–ê–í–ö–ò –î–ê–ù–ù–´–• ===")
    table.insert({"id": 1, "name": "Alice", "age": 25})
    table.insert({"id": 2, "name": "Bob", "age": 30})
    table.insert({"id": 3, "name": "Charlie", "age": 35})
    print("–î–∞–Ω–Ω—ã–µ –≤—Å—Ç–∞–≤–ª–µ–Ω—ã")

def test_select_data(table):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n=== –¢–ï–°–¢ –í–´–ë–û–†–ö–ò –î–ê–ù–ù–´–• ===")
    # –í—ã–±–æ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
    result1 = table.select()
    print(f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ: {result1}")
    
    # –í—ã–±–æ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    result2 = table.select(columns=["id", "name"])
    print(f"–¢–æ–ª—å–∫–æ id –∏ name: {result2}")
    
    # –í—ã–±–æ—Ä–∫–∞ —Å —É—Å–ª–æ–≤–∏—è–º–∏
    result3 = table.select(conditions={"name": "Alice"})
    print(f"–ì–¥–µ name='Alice': {result3}")

def test_update_data(table):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    print("\n=== –¢–ï–°–¢ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–• ===")
    updated = table.update({"age": 26}, {"name": "Alice"})
    print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {updated}")

def test_delete_data(table):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    print("\n=== –¢–ï–°–¢ –£–î–ê–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–• ===")
    deleted = table.delete({"name": "Bob"})
    print(f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted}")

def test_all_functions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ"""
    print("\n" + "="*50)
    print("üìä –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –§–£–ù–ö–¶–ò–ô")
    print("="*50)
    
    table = Table("users")
    
    test_basic_functionality(table)
    test_add_column(table)
    test_insert_data(table)
    test_select_data(table)
    test_modify_column(table)
    test_update_data(table)
    test_delete_data(table)
    test_drop_column(table)
    
    print("\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")

def interactive_test():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ç–µ—Å—Ç–æ–≤"""
    table = Table("users")
    
    tests = {
        "1": ("–ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª", test_basic_functionality),
        "2": ("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫", test_add_column),
        "3": ("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫", test_modify_column),
        "4": ("–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫", test_drop_column),
        "5": ("–í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö", test_insert_data),
        "6": ("–í—ã–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö", test_select_data),
        "7": ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", test_update_data),
        "8": ("–£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", test_delete_data),
        "9": ("–í–°–ï –¢–ï–°–¢–´", test_all_functions)
    }
    
    while True:
        print("\n" + "="*40)
        print("üéØ –í–´–ë–ï–†–ò–¢–ï –¢–ï–°–¢ –î–õ–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø")
        print("="*40)
        
        for key, (name, _) in tests.items():
            print(f"{key}. {name}")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (0-9): ").strip()
        
        if choice == "0":
            print("–í—ã—Ö–æ–¥ –∏–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            break
        elif choice in tests:
            test_name, test_func = tests[choice]
            print(f"\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
            try:
                if choice == "9":
                    test_func()  # –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º table
                else:
                    test_func(table)
                print(f"‚úÖ –¢–µ—Å—Ç '{test_name}' –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–õ–ê–°–°–ê TABLE")
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("1. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ç–µ—Å—Ç–æ–≤")
    print("2. –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    
    choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()
    
    if choice == "1":
        interactive_test()
    elif choice == "2":
        test_all_functions()
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.")
        interactive_test()


def test_insert_success():
    test_data = {"id": 1, "name": "Alice", "age": 30}
    table_structure = {"id": int, "name": str, "age": int}
    Table(name="test").storage.get_metadata = MagicMock(return_value=table_structure)
    result = Table(name="test").insert(values=test_data)
    assert result == {"success": True}


def test_insert_failed():
    test_data = {"id": 1, "name": "Alice", "age": "thirty"}
    table_structure = {"id": int, "name": str, "age": int}
    Table(name="test").storage.get_metadata = MagicMock(return_value=table_structure)
    result = Table(name="test").insert(values=test_data)
    assert result == {"success": False}


def test_select():
    test_data = ({"id": 1, "username": "Bob", "age": 24}, {"id": 2, "username": "Alice", "age": 14},
                 {"id": 3, "username": "Mark", "age": 1}, {"id": 4, "username": "Li", "age": 0},)
    Table(name="test").storage.get_from_data_file = MagicMock(return_value=test_data)
    test_columns = ["username"]
    test_conditions = {
        "username": {
            "type": str,
            "min_length": 2,
            "max_length": 20,
        },
        "age": {
            "type": int,
            "gt": 2,
            "lt": 120
        }
    }
    result = Table(name="test").select(columns=test_columns, conditions=test_conditions)
    assert result == [{"id": 2, "username": "Alice", "age": 14}]


def test_update():
    table_structure = {"id": int, "username": str, "age": int}
    Table(name="test").storage.get_metadata = MagicMock(return_value=table_structure)
    test_full_data = ({"id": 1, "username": "Tima", "age": 13}, {"id": 2, "username": "Robert", "age": 43},)
    Table(name="test").storage.get_from_data_file = MagicMock(return_value=test_full_data)
    new_data = {"username": "Franklin", "age": 25}
    test_conditions = {"username": "Robert"}
    result = Table(name="test").update(new_data=new_data, conditions=test_conditions)
    assert result == 1


def test_delete():
    test_full_data = ({"id": 1, "username": "Tima", "age": 13}, {"id": 2, "username": "Robert", "age": 43},)
    Table(name="test").storage.get_from_data_file = MagicMock(return_value=test_full_data)
    test_conditions = {"username": "Tima"}
    result = Table(name="test").delete(conditions=test_conditions)
    assert result == 1


if __name__ == "__main__":
    main()